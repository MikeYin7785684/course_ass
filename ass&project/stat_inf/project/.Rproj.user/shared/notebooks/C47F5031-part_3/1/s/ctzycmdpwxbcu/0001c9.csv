"0",""
"0","# Custom loss function"
"0","pdf_gaussian <- function(x, mu, sigma) {"
"0","  det_sigma <- det(sigma)"
"0","  const <- 1 / (sqrt((2*pi)^d * det_sigma))"
"0","  exp_val <- exp(-0.5 * t(x - mu) %*% solve(sigma) %*% (x - mu))"
"0","  return(const * exp_val)"
"0","}"
"0",""
"0","# Define the PDF of the mixture of Gaussians"
"0","logpdf_gaussian_mixture <- function(x, mus, sigmas) {"
"0","  q=1"
"0","  n <- nrow(mus)"
"0","  pdf <- 0"
"0","  for (i in 1:n) {"
"0","    pdf <- pdf+log( pdf_gaussian(x[i,], mus[i,], sigmas[,,i]))"
"0","  }"
"0","  return(pdf)"
"0","}"
"0","# mle<-function(params, data1,data2,data3){"
"0","#    n<-nrow(data1)"
"0","#   lincom<- matrix(params[1:9],3,3)"
"0","#   means<- matrix(params[10:15],3,2)"
"0","#   sigma<- array(params[16:27],dim=c(2,2,3))"
"0","#   y1<-rbind(data1[,1], data2[,1], data3[,1])"
"0","#   y2<-rbind(data1[,1], data2[,1], data3[,1])"
"0","#   log_loss<-0"
"0","#   for(i in 1:n){"
"0","#     x<-t(rbind(y1[,i]%*%solve(lincom), y2[,i]%*%solve(lincom)))"
"0","#     log_loss<-log_loss+logpdf_gaussian_mixture(x,means,sigma)"
"0","#   }"
"0","#   -log_loss"
"0","# }"
"0",""
"0",""
"0","eg_loss <- function(params, data1,data2,data3) {"
"0","  q=1"
"0","  n<-nrow(data1)"
"0","  lincom<- matrix(params[1:9],3,3)"
"0","  means<- matrix(params[10:15],3,2)"
"0","  sigma<- array(params[16:27],dim=c(2,2,3))"
"0","  weights<- params[28:30]"
"0","  y1<-rbind(data1[,1], data2[,1], data3[,1])"
"0","  y2<-rbind(data1[,1], data2[,1], data3[,1])"
"0","  p1<-eigen(cor(t(y1)))$vectors"
"0","  p2<-eigen(cor(t(y2)))$vectors"
"0","  dis<-NULL"
"0","  for(i in 1:3){"
"0","  dis<-rbind(dis,p1[,i]%*%(y1-rep(lincom%*%means[,1],n))+p2[,i]%*%(y2-rep(lincom%*%means[,2],n)))"
"0","  }"
"0","  loss<-0"
"0","  for(i in 1:n){"
"0","    # x<-t(rbind(y1[,i]%*%solve(lincom), y2[,i]%*%solve(lincom)))"
"0","    loss<-loss+sum(dis[,i]^2)"
"0","  }"
"0","  (loss/n)+q*sum(means%*%t(means))"
"0","}"
"0",""
"0",""
"0",""
"0","# Initialize parameters"
"0","linc <- diag(3)"
"0","means <- data[sample(1:nrow(data), k), ] # Randomly initialize means"
"0","sigma <- array(0, dim=c(d, d, k))"
"0","# for (i in 1:k) {"
"0","#   sigma[,,i] <- matrix(c(1,0.5,0.5,1),2,2)"
"0","# }"
"0","sigma[,,1] <- matrix(c(1, 0.5, 0.5, 1), 2, 2)"
"0","sigma[,,2] <- matrix(c(1, -0.7, -0.7, 1), 2, 2)"
"0","sigma[,,3]<- matrix(c(1, 0.2, 0.2, 1), 2, 2)"
"0","weights <- rep(1/3, 3) # Equal weights initially"
"0",""
"0","# Flatten parameters for optim"
"0","params <- c(as.vector(linc),as.vector(means), as.vector(sigma), weights)"
"0",""
"0","# Optimize parameters using optim"
"0","opt_result <- optim(par=params, fn=eg_loss,data1=data1,data2=data2,data3=data3, method=""L-BFGS-B"")"
"0",""
"0","# Extract optimized parameters"
"0","opt_params <- opt_result$par"
"0","opt_linc<-matrix(opt_params[1:9],3,3)"
"0","opt_means <- matrix(opt_params[10:15], 3, 2)"
"0","opt_sigma <- array(opt_params[16:27], dim=c(2, 2, 3))"
"0","opt_weights <- opt_params[28:30]"
"0",""
"0","# # Plot results"
"0","# plot(data, col='blue', pch=19, main=""EM with Custom Loss Function"")"
"0","# colors <- c(""red"", ""green"", ""blue"")"
"0","# points(opt_means, col=colors, pch=4, cex=2, lwd=2)"
"0","# legend(""topright"", legend=c(""Cluster 1 Mean"", ""Cluster 2 Mean"", ""Cluster 3 Mean""),"
"0","#        col=colors, pch=4, pt.cex=2, lwd=2)"
"0",""
"0",""
"0",""
"0",""
"0",""
